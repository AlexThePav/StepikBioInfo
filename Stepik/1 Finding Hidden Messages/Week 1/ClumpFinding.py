from Replication import FrequentWords, CountDict, PatternCount
from FasterFrequentWords import ComputeFrequencies, NumberToPattern, PatternToNumber

def ClumpFinding(Genome, k, L, t):
  frequentPatterns = []
  clumps = [0] * (4**k)
  for i in range(0, len(Genome)-L):
    text = Genome[i:i+L]
    frequencyArray = ComputeFrequencies(text, k)
    for j in range(0, 4**k-1):
      if frequencyArray[j] >= t:
        clumps[j] = 1
  for i in range(0, 4**k-1):
    if clumps[i] == 1:
      pattern = NumberToPattern(i, k)
      frequentPatterns.append(pattern)
  return frequentPatterns

def BetterClumpFinding(Genome, k , L, t):
  frequentPatterns = []
  clumps = [0] * (4**k)
  text = Genome[0:L]
  frequencyArray = ComputeFrequencies(text, k)
  for i in range(0, 4**k-1):
    if frequencyArray[i] >= t:
      clumps[i] = 1
  for i in range(1, len(Genome)-L):
    firstPattern = Genome[i-1:i+k-1]
    index = PatternToNumber(firstPattern)
    frequencyArray[index] -= 1
    lastPattern = Genome[i+L-k:i+L]
    index = PatternToNumber(lastPattern)
    frequencyArray[index] += 1
    if frequencyArray[index] >= t:
      clumps[index] = 1
  for i in range(0, 4**k-1):
    if clumps[i] == 1:
      pattern = NumberToPattern(i, k)
      frequentPatterns.append(pattern)
  return frequentPatterns

if __name__ == "__main__":
  print(len(BetterClumpFinding("CTGCACGTCTCCCTCCACATAGTACAAACCTAAGGCCATAATTTCTCCTCTTTTATACAATATCTGGTTTATTTCGGAGGGAGCGTGGACCCGTCTCTAAGTCAACCAAGTGCCCCGCGCAAACGGAGGGAGATTGTCGTACCTAAGTGACTCCTGGTGGTGAACAAGTGAACAACAGGAGCATGCAGCATGCCCGAGCATGCGCCGGCCAACGCCAGTCACGCATGAGGGTCTAGTCTTACGACCGGGACGATAGTCTTCAGGCTCAATAGATCAATAGAATAGTTCAATAGACGGGGCAGCTTTAATCTATTTCTGATTCTGCGTGTTAATCACGCAATCTTATGGGAGAGAGACGGCGCGAGACGGAGACGGCTCATCATCCGTGCCAAGTAGCTTACCGAGGCTCGTAGCAGGTGCTATCTCCGATGCCCATCCTATGATGGTTGCGATGCCTCCGCCTAACGGAAGTTAATCAAGTTAATAAGTTAATTCCGACAACGACTCCGACAAGTGGTCCTATCCGCTTAGGGATCCTTGCGATGTCTCATATATTGTCCTTATTGCCGGGTGGACCGCCCTTGGGTACCGGAGTGCAGCCCTGTGTGCTAACCATCGTGAGTGCGGATGAGGCACAACATACTACATTTTGGCTGTGTATCTAATCCCAAACCCGCCGCGGCCCCGTCCGAGGAGTATAGTATACTACGGCCAGGTTACCTGTCTTTGTGCCTCTTCCTTTCCTTAGGTCCTTAGGTCCTTAGCCCCCCACCGTCCCCACCCACCGTGGTCGGTAAAAGTACGACCTCTATCCATAAACGACCCAATTTGCCCTCAGTCACCCGAAATTGGCGCTGCACCCTCTCGAACGTGACGTGGTCGAACGTGCGGCAGTAATGTATCAGTCCTTCTACGCGTACGCGTTTCTCTACGCGGCGCAGGTGGGGAAGCTCTTGTGCGCAACATTCTAGTTCCAGTTTGCCAGGTTCCATGAAGAACATGGATCCTTTATAGCTCCAAGGACGGTGAGGCAGACGGGAAGAAAGGCTAGCACTCTTGCAACCTCTACTGCAAACGTACATAGTTATTCAATCGTATCAACTATATCGATAAAAACTGTGACATCTATGTGCCGCCTTCGATCTTAGGAGGCCATGTCACGCCATGTCGCCATGTCCTTGAAAAATGAAGAACTCACTACTAAAAGTCGGTAGAGTAGTGTGCTTGTAGCTCGATAAGTTTCGACTAATCTAAAATAGGGCCGTGAGACCGCGTGCGGTGCTGCTCGTAAGTGTGACGCTCGTAAAACTCACCTACTTCGCCTCAGTGGATGCGACAAATTATACTTGAGGCGGATAGAAGCCTACTCGGAAGCGTACCTGCTGTGGCATCTATCTGACTGTTCCCGCCATAGACTCCTTCAGACCTATCTTACAACATACAACATACAATTACAACATAGCGATGTGTCTCCTCTGCCGATTTAACGGAGCCCCGACGGCAATGTGTACGGCACAGAGCCAGTGGGAGGCCCCAACTCAGAATAGTTTTTGTCCTCATTGAACGCTTTGTTAGCTGCCAGGACTAAGCGTACGAATCTCAAAAATAAAAAATAAAATCAAAAATACCTAGCAACCTAGCAACCTAGCAACCTAGCAATTGTGTCCTTGTGTCCTTGTGTCCTTGTGTCCTTGTGTCCTTGTGTCC", 8, 29, 3)))
